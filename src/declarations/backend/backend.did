type Error = variant {
  InvalidInput : text;
  NotFound;
  InviteNotFound;
  InviteExpired;
  TeamNotFound;
  Unauthorized;
  AlreadyExists;
  InsufficientPermissions;
  InternalError : text;
  ProjectNotFound;
  UserNotFound;
};
type Invite = record {
  id : text;
  status : InviteStatus;
  role : Role;
  created_at : nat64;
  target : InviteTarget;
  invited_by : principal;
  invited_user : principal;
};
type InviteStatus = variant { Accepted; Declined; Cancelled; Pending };
type InviteTarget = variant { Team : text; Project : text };
type Owner = variant { Team : text; User : principal };
type Project = record {
  id : text;
  updated_at : nat64;
  members : vec TeamMember;
  owner : Owner;
  name : text;
  description : text;
  created_at : nat64;
};
type ProjectMember = record {
  "principal" : principal;
  role : Role;
  joined_at : nat64;
};
type ProjectUpdate = record { name : opt text; description : opt text };
type Result = variant { Ok; Err : Error };
type Result_1 = variant { Ok : text; Err : Error };
type Result_2 = variant { Ok : principal; Err : Error };
type Role = variant { Collaborator; Owner; Manager };
type Team = record {
  id : text;
  is_public : bool;
  updated_at : nat64;
  members : vec TeamMember;
  name : text;
  description : text;
  created_at : nat64;
  owner_principal : principal;
};
type TeamMember = record {
  "principal" : principal;
  role : Role;
  joined_at : nat64;
};
type TeamUpdate = record {
  is_public : opt bool;
  name : opt text;
  description : opt text;
};
type ThemePreferences = record { color : text; dark_mode : bool };
type User = record {
  updated_at : nat64;
  "principal" : principal;
  created_at : nat64;
  profile : UserProfile;
};
type UserProfile = record {
  bio : opt text;
  username : text;
  avatar_url : opt text;
  name : text;
  theme_preferences : opt ThemePreferences;
  email : opt text;
};
type UserProfileUpdate = record {
  bio : opt opt text;
  username : opt text;
  avatar_url : opt opt text;
  name : opt text;
  theme_preferences : opt opt ThemePreferences;
  email : opt opt text;
};
service : {
  accept_invite : (text) -> (Result);
  cancel_invite : (text) -> (Result);
  create_project : (text, text, Owner) -> (Result_1);
  create_team : (text, text, bool) -> (Result_1);
  create_user : (UserProfile) -> (Result_2);
  decline_invite : (text) -> (Result);
  delete_project : (text) -> (Result);
  delete_team : (text) -> (Result);
  get_invites : (principal) -> (vec Invite) query;
  get_pending_invites : (principal) -> (vec Invite) query;
  get_project : (text) -> (opt Project) query;
  get_public_teams : () -> (vec Team) query;
  get_team : (text) -> (opt Team) query;
  get_team_projects : (text) -> (vec Project) query;
  get_user : (principal) -> (opt User) query;
  get_user_projects : (principal) -> (vec Project) query;
  get_user_teams : (principal) -> (vec Team) query;
  get_users : () -> (vec User) query;
  health_check : () -> (text) query;
  invite_user : (InviteTarget, Role, principal) -> (Result_1);
  remove_member : (InviteTarget, principal) -> (Result);
  transfer_ownership : (text, Owner) -> (Result);
  update_profile : (principal, UserProfileUpdate) -> (Result);
  update_project : (text, ProjectUpdate) -> (Result);
  update_team : (text, TeamUpdate) -> (Result);
  update_theme_preferences : (ThemePreferences) -> (Result);
  update_username : (principal, text) -> (Result);
}
